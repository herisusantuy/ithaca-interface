// Font smoothing
@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// Convert px to rem
@function px-to-rem($px) {
  @return ($px / 16) * 1rem;
}

// Font weights
$font-weights: (
  'regular': 400,
  'medium': 500,
  'semibold': 600,
  'bold': 700,
);

// Font sizes
$font-sizes: (
  'display-2xl': (
    font-size: px-to-rem(72),
    line-height: px-to-rem(90),
  ),
  'display-xl': (
    font-size: px-to-rem(60),
    line-height: px-to-rem(72),
  ),
  'display-lg': (
    font-size: px-to-rem(48),
    line-height: px-to-rem(60),
  ),
  'display-md': (
    font-size: px-to-rem(36),
    line-height: px-to-rem(44),
  ),
  'display-sm': (
    font-size: px-to-rem(30),
    line-height: px-to-rem(38),
  ),
  'display-xs': (
    font-size: px-to-rem(24),
    line-height: px-to-rem(32),
  ),
  'text-xl': (
    font-size: px-to-rem(20),
    line-height: px-to-rem(30),
  ),
  'text-lg': (
    font-size: px-to-rem(18),
    line-height: px-to-rem(28),
  ),
  'text-md': (
    font-size: px-to-rem(16),
    line-height: px-to-rem(24),
  ),
  'text-sm': (
    font-size: px-to-rem(14),
    line-height: px-to-rem(20),
  ),
  'text-xs': (
    font-size: px-to-rem(12),
    line-height: px-to-rem(18),
  ),
);

// Mixin for font size
@mixin font-size($scale, $weight) {
  font-size: map-get(map-get($font-sizes, $scale), font-size);
  line-height: map-get(map-get($font-sizes, $scale), line-height);
  font-weight: map-get($font-weights, $weight);
}

// Spacing pattern
$spacings: (
  2: px-to-rem(2),
  4: px-to-rem(4),
  6: px-to-rem(6),
  8: px-to-rem(8),
  10: px-to-rem(10),
  12: px-to-rem(12),
  14: px-to-rem(14),
  16: px-to-rem(16),
  20: px-to-rem(20),
  24: px-to-rem(24),
  32: px-to-rem(32),
  34: px-to-rem(34),
  40: px-to-rem(40),
  48: px-to-rem(48),
  56: px-to-rem(56),
  60: px-to-rem(60),
  64: px-to-rem(64),
  72: px-to-rem(72),
  73: px-to-rem(73),
  80: px-to-rem(80),
  84: px-to-rem(84),
  88: px-to-rem(88),
  96: px-to-rem(96),
  119: px-to-rem(119),
  124: px-to-rem(124),
  128: px-to-rem(128),
  160: px-to-rem(160),
  192: px-to-rem(192),
  224: px-to-rem(224),
  256: px-to-rem(256),
);

// Mixin for spacing
@mixin spacing($property, $size, $sides: 'all') {
  @if $sides == 'all' {
    #{$property}: map-get($spacings, $size);
  } @else if $sides == 'top+bottom' {
    #{$property}-top: map-get($spacings, $size);
    #{$property}-bottom: map-get($spacings, $size);
  } @else if $sides == 'left+right' {
    #{$property}-left: map-get($spacings, $size);
    #{$property}-right: map-get($spacings, $size);
  } @else if $sides == 'top' {
    #{$property}-top: map-get($spacings, $size);
  } @else if $sides == 'bottom' {
    #{$property}-bottom: map-get($spacings, $size);
  } @else if $sides == 'left' {
    #{$property}-left: map-get($spacings, $size);
  } @else if $sides == 'right' {
    #{$property}-right: map-get($spacings, $size);
  } @else {
    @warn "Invalid value for `$sides`. It should be 'all', 'top', 'bottom', 'left', 'right', 'top+bottom', or 'left+right'.";
  }
}

// Breakpoints
$breakpoints: (
  mobile: px-to-rem(480),
  tablet: px-to-rem(990),
  desktop: px-to-rem(1440),
);

// Mixin for breakpoints
@mixin breakpoint($point) {
  @if map-has-key($breakpoints, $point) {
    @media (max-width: map-get($breakpoints, $point)) {
      @content;
    }
  } @else {
    @warn "No breakpoint defined for `#{$point}`.";
  }
}

// Container sizes
$container-sizes: (
  sm: px-to-rem(480),
  blog: px-to-rem(720),
  md: px-to-rem(990),
  lg: px-to-rem(1024),
  xl: px-to-rem(1440),
);
